use lazy_regex::regex;
use lazy_static::lazy_static;

use crate::definition::{觸鍵方式, 輸入方案定義, 轉寫法定義, 鍵位定義};
use crate::gear::layout::{
    上檔盤面, 基本盤面, 大寫字母盤面, 盤面定義, 盤面選擇碼, 配列, 鍵盤佈局, 鍵面刻印,
};
use crate::key_code::KeyCode;
use crate::spelling_algebra::拼寫運算;
use crate::{盤面, 變換, 鍵面};

macro_rules! 鍵位 {
    ($輸入碼: ident => $鍵碼: path) => {
        鍵位定義 {
            輸入碼: stringify!($輸入碼),
            鍵碼: $鍵碼,
        }
    };
}

const 並擊鍵序: &[鍵位定義] = &[
    鍵位!(云 => KeyCode::A),
    鍵位!(以 => KeyCode::Q),
    鍵位!(亞 => KeyCode::Z),
    鍵位!(心 => KeyCode::S),
    鍵位!(清 => KeyCode::W),
    鍵位!(精 => KeyCode::X),
    鍵位!(曉 => KeyCode::D),
    鍵位!(來 => KeyCode::E),
    鍵位!(非 => KeyCode::C),
    鍵位!(見 => KeyCode::F),
    鍵位!(端 => KeyCode::R),
    鍵位!(幫 => KeyCode::V),
    鍵位!(溪 => KeyCode::G),
    鍵位!(透 => KeyCode::T),
    鍵位!(滂 => KeyCode::B),
    鍵位!(家 => KeyCode::Space),
    鍵位!(遮 => KeyCode::H),
    鍵位!(科 => KeyCode::Y),
    鍵位!(靴 => KeyCode::N),
    鍵位!(師 => KeyCode::J),
    鍵位!(孤 => KeyCode::U),
    鍵位!(諸 => KeyCode::M),
    鍵位!(威 => KeyCode::K),
    鍵位!(修 => KeyCode::I),
    鍵位!(吾 => KeyCode::Comma),
    鍵位!(登 => KeyCode::L),
    鍵位!(賓 => KeyCode::O),
    鍵位!(金 => KeyCode::Dot),
    鍵位!(德 => KeyCode::Semicolon),
    鍵位!(畢 => KeyCode::P),
    鍵位!(急 => KeyCode::Slash),
];

lazy_static! {
    static ref 並擊碼表示: Box<[拼寫運算::<'static>]> = Box::new([
        變換!("非幫", "明"),
        變換!("來端", "泥"),
        變換!("曉見", "我"),
        變換!("云見", "古"),
        變換!("云溪", "困"),
        變換!("^([家遮科靴登賓金德畢急威修])", "亞$1"),
        變換!("^([師諸])", "以$1"),
        變換!("^([孤])", "云$1"),
        變換!("師賓", "先"),
        變換!("師畢", "屑"),
        變換!("師威", "幾"),
        變換!("孤登", "東"),
        變換!("孤德", "篤"),
        變換!("師登", "英"),
        變換!("師德", "益"),
        變換!("遮登", "鄭"),
        變換!("遮德", "石"),
        變換!("靴登", "張"),
        變換!("靴德", "着"),
        變換!("科登", "剛"),
        變換!("科德", "角"),
        變換!("師修", "朝"),
        變換!("孤修", "高"),
        變換!("諸賓", "鴛"),
        變換!("諸畢", "乙"),
        變換!("家威", "皆"),
        變換!("家修", "交"),
        變換!("科威", "栽"),
        變換!("師金", "兼"),
        變換!("師急", "劫"),
        變換!("靴賓", "津"),
        變換!("靴畢", "卒"),
        變換!("靴威", "雖"),
        變換!("家金", "緘"),
        變換!("家急", "甲"),
        變換!("家賓", "翻"),
        變換!("家畢", "發"),
        變換!("孤賓", "官"),
        變換!("孤畢", "括"),
        變換!("孤威", "魁"),
        變換!("科賓", "干"),
        變換!("科畢", "割"),
        變換!("科金", "甘"),
        變換!("科急", "蛤"),
        變換!("家登", "彭"),
        變換!("家德", "額"),
    ]);
    static ref 並擊碼鍵位: Box<[拼寫運算<'static>]> = Box::new([
        變換!("明", "非幫"),
        變換!("泥", "來端"),
        變換!("我", "曉見"),
        變換!("古", "云見"),
        變換!("困", "云溪"),
        變換!("先", "師賓"),
        變換!("屑", "師畢"),
        變換!("幾", "師威"),
        變換!("東", "孤登"),
        變換!("篤", "孤德"),
        變換!("英", "師登"),
        變換!("益", "師德"),
        變換!("鄭", "遮登"),
        變換!("石", "遮德"),
        變換!("張", "靴登"),
        變換!("着", "靴德"),
        變換!("剛", "科登"),
        變換!("角", "科德"),
        變換!("朝", "師修"),
        變換!("高", "孤修"),
        變換!("鴛", "諸賓"),
        變換!("乙", "諸畢"),
        變換!("皆", "家威"),
        變換!("交", "家修"),
        變換!("栽", "科威"),
        變換!("兼", "師金"),
        變換!("劫", "師急"),
        變換!("津", "靴賓"),
        變換!("卒", "靴畢"),
        變換!("雖", "靴威"),
        變換!("緘", "家金"),
        變換!("甲", "家急"),
        變換!("翻", "家賓"),
        變換!("發", "家畢"),
        變換!("官", "孤賓"),
        變換!("括", "孤畢"),
        變換!("魁", "孤威"),
        變換!("干", "科賓"),
        變換!("割", "科畢"),
        變換!("甘", "科金"),
        變換!("蛤", "科急"),
        變換!("彭", "家登"),
        變換!("額", "家德"),
        變換!("亞([遮科靴登賓金德畢急威修])", "$1"),
        變換!("以([師諸])", "$1"),
        變換!("云([孤])", "$1"),
    ]);
}

const 粵語拼音盤面: 盤面定義<'static> = 盤面![
    [ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ],
    [ 以 清 來 端 透 科 孤 修 賓 畢 _ _ ],
    [ 云 心 曉 見 溪 遮 師 威 登 德 _ ],
    [ 亞 精 非 幫 滂 靴 諸 吾 金 急 ],
    [ 家 _ 家 ]
];

const 粵語並擊佈局: 鍵盤佈局 = 鍵盤佈局 {
    盤面: &[基本盤面, 上檔盤面, 大寫字母盤面, 粵語拼音盤面],
    默認盤面: 盤面選擇碼(4),
    首選配列: 配列::正交直列,
};

pub fn 粵語輸入方案() -> 輸入方案定義<'static> {
    輸入方案定義 {
        名稱: "粵語",
        佈局: &粵語並擊佈局,
        指法: 觸鍵方式::並擊,
        字根表: 並擊鍵序,
        轉寫法: 轉寫法定義 {
            輸入碼表示: &並擊碼表示,
            輸入碼鍵位: &並擊碼鍵位,
            拼式轉寫規則: &[],
            字根拆分規則: &[],
            拼式驗證規則: &[],
        },
    }
}
