use lazy_regex::{regex, Regex};
use lazy_static::lazy_static;

use crate::definition::{觸鍵方式, 輸入方案定義, 轉寫法定義, 鍵位定義};
use crate::gear::layout::{
    上檔盤面, 基本盤面, 大寫字母盤面, 盤面定義, 盤面選擇碼, 配列, 鍵盤佈局, 鍵面刻印,
};
use crate::key_code::KeyCode;
use crate::spelling_algebra::拼寫運算;
use crate::{盤面, 變換, 轉寫, 鍵面};

macro_rules! 鍵位 {
    ($輸入碼: ident => $鍵碼: path) => {
        鍵位定義 {
            輸入碼: stringify!($輸入碼),
            鍵碼: $鍵碼,
        }
    };
}

const 並擊鍵序: &[鍵位定義] = &[
    鍵位!(S => KeyCode::S),
    鍵位!(C => KeyCode::W),
    鍵位!(Z => KeyCode::X),
    鍵位!(H => KeyCode::D),
    鍵位!(L => KeyCode::E),
    鍵位!(F => KeyCode::C),
    鍵位!(G => KeyCode::F),
    鍵位!(D => KeyCode::R),
    鍵位!(B => KeyCode::V),
    鍵位!(K => KeyCode::G),
    鍵位!(T => KeyCode::T),
    鍵位!(P => KeyCode::B),
    鍵位!(A => KeyCode::Space),
    鍵位!(E => KeyCode::H),
    鍵位!(O => KeyCode::Y),
    鍵位!(V => KeyCode::N),
    鍵位!(I => KeyCode::J),
    鍵位!(U => KeyCode::U),
    鍵位!(Y => KeyCode::M),
    鍵位!(J => KeyCode::K),
    鍵位!(W => KeyCode::I),
    鍵位!(M => KeyCode::Comma),
    鍵位!(Ḳ => KeyCode::L),
    鍵位!(Ṫ => KeyCode::O),
    鍵位!(Ṗ => KeyCode::Dot),
];

lazy_static! {
    static ref 並擊轉粵拼: Box<[拼寫運算::<'static>]> = Box::new([
        變換!("FB", "m"),
        變換!("LD", "n"),
        變換!("HG", "ng"),
        變換!("SG", "gw"),
        變換!("SK", "kw"),
        變換!("SH", "w"),
        變換!("CL", "j"),
        變換!("ZF", ""),
        變換!("JḲ", "-ng"),
        變換!("WṪ", "-n"),
        變換!("MṖ", "-m"),
        變換!("Ḳ$", "-k"),
        變換!("Ṫ$", "-t"),
        變換!("Ṗ$", "-p"),
        變換!("IJ", "ei"),
        變換!("UW", "ou"),
        變換!("J$", "-i"),
        變換!("W$", "-u"),
        變換!("A", "aa"),
        變換!("Y", "yu"),
        變換!("V-(ng|k)$", "oe${1}"),
        變換!("V-([int])$", "eo${1}"),
        變換!("V", "oe"),
        變換!("^ngM$", "ng"),
        轉寫!("SCZHLFGDBKTPEOIUM", "sczhlfgdbktpeoium"),
        變換!("([aeiou])-([iumptk]|ng?)$", "${1}${2}"),
        變換!("-", "a"),
        變換!(" ", ""),
        變換!("^([iy])", "j${1}"),
        變換!("^(u)", "w${1}"),
    ]);
    static ref 粵拼轉並擊: Box<[拼寫運算<'static>]> = Box::new([
        變換!("^m$", "M"),
        變換!("^ng$", "HGM"),
        變換!("^m", "FB"),
        變換!("^ng", "HG"),
        變換!("^n", "LD"),
        變換!("^gw", "SG"),
        變換!("^kw", "SK"),
        變換!("^w([^u])", "SH${1}"),
        變換!("^j([^iy])", "CL${1}"),
        變換!("([aeiou])n$", "${1}WṪ"),
        變換!("([aeoiu])t$", "${1}Ṫ"),
        變換!("([aeoiu])ng$", "${1}JḲ"),
        變換!("([aeoiu])k$", "${1}Ḳ"),
        變換!("([aeoiu])m$", "${1}MṖ"),
        變換!("([aeoiu])p$", "${1}Ṗ"),
        變換!("ei$", "IJ"),
        變換!("([aou])i$", "${1}J"),
        變換!("ou$", "UW"),
        變換!("([aei])u$", "${1}W"),
        變換!("aa", "A"),
        變換!("oe|eo", "V"),
        變換!("^j([iy])", "${1}"),
        變換!("^w(u)", "${1}"),
        變換!("^j", "CL"),
        變換!("^w", "SH"),
        變換!("yu", "Y"),
        變換!("a", ""),
        轉寫!("sczhlfgdbktpeoium", "SCZHLFGDBKTPEOIUM"),
    ]);

    static ref 並擊碼表示: Box<[拼寫運算<'static>]> = Box::new([
        變換!("FB", "m"),
        變換!("LD", "n"),
        變換!("HG", "ng"),
        變換!("SG", "gw"),
        變換!("SK", "kw"),
        變換!("SH", "w"),
        變換!("CL", "j"),
        變換!("ZF", ""),
        變換!("JḲ", "-ng"),
        變換!("WṪ", "-n"),
        變換!("MṖ", "-m"),
        變換!("Ḳ$", "-k"),
        變換!("Ṫ$", "-t"),
        變換!("Ṗ$", "-p"),
        變換!("IJ", "ei"),
        變換!("UW", "ou"),
        變換!("J$", "-i"),
        變換!("W$", "-u"),
        變換!("A", "aa"),
        變換!("Y", "yu"),
        變換!("V(-ng|k)$", "oe${1}"),
        變換!("V(-[int])$", "eo${1}"),
        變換!("V", "oe"),
        轉寫!("SCZHLFGDBKTPEOIUM", "sczhlfgdbktpeoium"),
        變換!("^([bpmfdtnlgkhzcsjw]|ng|[gk]w*)([-aeiouy])", "${1} ${2}"),
    ]);

    static ref 並擊碼鍵位: Box<[拼寫運算<'static>]> = Box::new([
        變換!("^m$", "M"),
        變換!("^ng$", "HGM"),
        變換!("^m", "FB"),
        變換!("^ng", "HG"),
        變換!("^n", "LD"),
        變換!("^gw", "SG"),
        變換!("^kw", "SK"),
        變換!("^w([^u])", "SH${1}"),
        變換!("^j([^iy])", "CL${1}"),
        變換!("-n$", "WṪ"),
        變換!("-t$", "Ṫ"),
        變換!("-ng$", "JḲ"),
        變換!("-k$", "Ḳ"),
        變換!("-m$", "MṖ"),
        變換!("-p$", "Ṗ"),
        變換!("ei$", "IJ"),
        變換!("-i$", "J"),
        變換!("ou$", "UW"),
        變換!("-u$", "W"),
        變換!("aa", "A"),
        變換!("oe|eo", "V"),
        變換!("^j([iy])", "${1}"),
        變換!("^w(u)", "${1}"),
        變換!("^j", "CL"),
        變換!("^w", "SH"),
        變換!("yu", "Y"),
        轉寫!("sczhlfgdbktpeoium", "SCZHLFGDBKTPEOIUM"),
    ]);
}

lazy_static! {
    static ref 貌似粵拼: Box<[&'static Regex]> = Box::new([
        regex!("^[bpmfdtnlgkhzcsjwaoey][a-z]*$").deref(),
    ]);
}

const 宮保粵拼盤面: 盤面定義<'static> = 盤面![
    [ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ],
    [ 空 {中:c, 上:_, 下:_, 左:_, 右:j} {中:l, 上:_, 下:_, 左:_, 右:_} {中:d, 上:_, 下:_, 左:n, 右:_} t o {中:u, 上:_, 下:_, 左:_, 右:ou} {中:"˗u", 上:_, 下:_, 左:_, 右:_} {中:"˗t", 上:_, 下:_, 左:"˗n", 右:_} 空 _ _ ],
    [ 空 {中:s, 上:_, 下:_, 左:_, 右:w} {中:h, 上:_, 下:_, 左:_, 右:_} {中:g, 上:_, 下:_, 左:ng, 右:_} k e {中:i, 上:_, 下:_, 左:_, 右:ei} {中:"˗i", 上:_, 下:_, 左:_, 右:_} {中:"˗k", 上:_, 下:_, 左:"˗ng", 右:_} 空 _ ],
    [ 空 {中:z, 上:_, 下:_, 左:_, 右:"'"} {中:f, 上:_, 下:_, 左:_, 右:_} {中:b, 上:_, 下:_, 左:m, 右:_} p {中:oe, 上:_, 下:eo, 左:_, 右:_} yu {中:m, 上:_, 下:_, 左:_, 右:_} {中:"˗p", 上:_, 下:_, 左:"˗m", 右:_} 空 ],
    [ aa _ aa ]
];

const 宮保粵拼佈局: 鍵盤佈局 = 鍵盤佈局 {
    盤面: &[基本盤面, 上檔盤面, 大寫字母盤面, 宮保粵拼盤面],
    默認盤面: 盤面選擇碼(4),
    首選配列: 配列::正交直列,
};

pub fn 宮保粵拼輸入方案() -> 輸入方案定義<'static> {
    輸入方案定義 {
        名稱: "宮保粵拼",
        佈局: &宮保粵拼佈局,
        指法: 觸鍵方式::並擊,
        字根表: 並擊鍵序,
        轉寫法: 轉寫法定義 {
            輸入碼表示: &並擊碼表示,
            輸入碼鍵位: &並擊碼鍵位,
            拼式轉寫規則: &並擊轉粵拼,
            字根拆分規則: &粵拼轉並擊,
            拼式驗證規則: &貌似粵拼,
        },
    }
}
